LOG DES PLAYGROUND


PLAYGROUND.TEST.JS
// Jest nous permet via le regex d'avoir des fichiers de test unitaire avec l'extension .test.js comme c'est le cas avec playground
//describe() est comme un chapitre qui introduit ce qu'on est sur le point de tester
// suivons la logique de test :
/* nous allons tester basic math*/
describe("basic math", () => {
  /* qui doit ajouter 2 chiffres*/
  it("add two numbers", () => {
    /*tel que 1+1=2 [exemple]*/
    expect(1 + 1).toBe(2);
    //Pour lancer le test on peut remarquer dans le fichier package.json qu'il ya dans debug la commande test:unit consacre aux test unitaire via "npm run"
    /**resultat du premier test :
     *  PASS  tests/unit/playground.test.js
      basic math
        âˆš add two numbers (2 ms)

    Test Suites: 1 passed, 1 total
    Tests:       1 passed, 1 total
    Snapshots:   0 total
    Time:        2.62 s
    */
  });

  //deuxieme test
  it("substract two numbers", () => {
    expect(10 - 7).toBe(3);
    // fait expres pour tester l'erreur
    // expect(10 - 3).toBe(6);
  });
});

//test playground.js : fonction EvenOrOdd
import { evenOrOdd, multiply } from "@/playground";
describe("evenOrOdd", () => {
  describe("when the number is even", () => {
    it("indicates number is even", () => {
      expect(evenOrOdd(4)).toBe("Even");
    });
  });
  describe("when the number is Odd", () => {
    it("indicate the number is Odd", () => {
      expect(evenOrOdd(3)).toBe("Odd");
    });
  });
});

//test playground.js : fonction multiply
describe("multiply", () => {
  it("should multiply 2 numbers", () => {
    expect(multiply(2, 3)).toBe(6);
  });
});











PLAYGROUND.JS
//Debut : Dev data renderer
const developer = {
  salary: 10000,
  experience: 4.5,
  techstack: ["Vue", "Html", "css"],
  lookingForWork: true,
  doubleSalary() {
    this.salary = this.salary * 2;
    this.lookingForWork = false;
  },
};
console.log(developer);
console.log(developer.lookingForWork);
// Now we double THE SALARY  and we turn seeking job to false.
developer.doubleSalary();
console.log(developer);
console.log(developer.lookingForWork);
//FIN

export const evenOrOdd = (number) => {
  if (number % 2 === 0) {
    return "Even";
  } else {
    return "Oddz";
  }
};

export const multiply = (
  a,
  b
) => /** a*b; on pouvait juste s'arreter la avec la syntaxe ES6*/ {
  //return a * b;

  /**c'est la facon la plus facile de le faire mais voici
   * le process de la multiplication via une boucle for()
   * on initialise un stamp "produit" et un pas "i"
   * i<a ou i<b entrainera son inverse sur produit += ...
   */

  let produit = 0;
  for (let i = 0; i < b; i++) {
    produit += a;
  }
  return produit;
};
console.log("le resultat est", multiply(3, 5));
